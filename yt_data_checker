#!/usr/bin/python
###################################################################################################
#           Author: Alexander Boyle                                                               #
#           Coding Challenge for Fullscreen. Attn: KaChon                                         #
#           Date Published: Oct 5, 2016                                                           #
#           https://gist.github.com/kachon-fullscreen/d250d1ce77182bf9a80a9e7add54aa96            #
###################################################################################################

import sys
import os
import csv
import locale
from optparse import OptionParser

locale.setlocale( locale.LC_ALL, 'en_US.UTF-8' ) 

validcsvkeys = ['Account Email', 'YouTube Channel', 'Subscriber Count']
concernlist = ['subscriber_count', 'channel_ownership']     #based on criteria from the challenge


def parseArgs():
    """ Parse and validate user arguments.
    """
    usage = "usage: %prog file1.csv file2.csv [concern] \
            \n[concern] options: "+str(", ".join(concernlist))+"."
    parser = OptionParser(usage=usage)
    (options, args) = parser.parse_args()

    if len(args) < 2:
        sys.exit("ERROR: Invalid number of arguments input. Please input 2 csv files for comparrison. \nSee '-h' for usage.")
    if len(args) == 3:
        if args[2] not in concernlist:
            args[2] = None
            print "WARNING: Concern input '%s' not valid. Outputting ALL results. Please see -h for usage." %args[2]
    
    for arg in args[:2]:
        if not os.path.isfile(arg):
            sys.exit("ERROR: Input file %s does not exist. Exiting ..." %arg)

    return args


def cleanChannelID(channelID):
    """ Format ChannelID for comparrison. 
        Removes additional URL content,
        And strips optional "UC" prefix.
        @rtytpe:   number
        @return:   the converted channelid to an int.
    """

    value = channelID
    if "/" in channelID:
        value = channelID.split("/")[-1]
    value = value[2:] if "UC" in value[:2] else value

    return value

def cleanSubscriberCount(count):
    """ Formats Subcriber Count from 
        String to int for comparrison.
        @rtype:    number
        @return:   Subscriber Count as an int.
    """
    
    value = None
    if type(count) is str and "," in count:
        value = locale.atoi(count) #convert any comma valued subscribers count to an integer. 
    return value

def ingestCsvFile(inputfile):
    """ Verify and parse data from the input file to a dictionary format.
        @rtype:    dict
        @return:   A dict of the csv where each row uses email as the key.
    """

    results = {}
    
    with open(inputfile, mode="r") as openfile:
        parsedfile = csv.DictReader(openfile) 
        if parsedfile.fieldnames == validcsvkeys:   #Is the csv formatted properly for input?
            for row in parsedfile:
                newrow = row.items()                                                         #making a list of sets
                newrow += [('channelid', cleanChannelID(row.get('YouTube Channel',"")))]     #adding a comparable channel ID
                newrow += [('count', cleanSubscriberCount(row.get('Subscriber Count',"")))]  #adding a comparable integer count
                results[row.get('Account Email',"")] = dict(newrow)
        else:
            print "ERROR: CSV file %s headers not formatted properly. Skipping..." %inputfile
    return results

def compareCsvDataSets(fileone, filetwo, concern=None):
    """ Compare CSV extracted data from input files. Optionally filter based on a concern.
        @rtype:     dict
        @return:    A dict of datasets listed by their respective emails.
    """

    discrepencies = {}

    datasetone = ingestCsvFile(fileone)
    datasettwo = ingestCsvFile(filetwo)

    if datasetone and datasettwo:
        for email, dataone in datasetone.items():
            datatwo = datasettwo.get(email, None)
            if dataone['channelid'] != datatwo['channelid']:
                if not concern or concern == 'subscriber_count':
                    discrepencies[email] = {'d1':dataone, 'd2':datatwo}
            if dataone['count'] != datatwo['count']:
                if not concern or concern == 'channel_ownership':
                    discrepencies[email] = {'d1':dataone, 'd2':datatwo}
    else:
        plural = "s" if not datasetone and not datasettwo else ""
        print "Comparisson failed due to invalid CSV%s input. Exiting..." %plural
    return discrepencies

if __name__ == "__main__":
    args = parseArgs()

    discrepencies = compareCsvDataSets(*args)
    print "\n".join(email for email in discrepencies.keys())
